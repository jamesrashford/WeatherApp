package net.spacejunkjim.miniproject3;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;

/**
 * The GUI Frame for Part 2 of the XML Assignment
 * @author James Ashford, Dorian Dressler
 */
public class WeatherFrame extends javax.swing.JFrame {
    private ArrayList<Location> locations;
    private String defaultFrameInputText = "Enter a location...";
    /**
     * Constructor new form WeatherFrame
     */
    public WeatherFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appTitle = new JLabel();
        queryLabel = new JLabel();
        queryField = new JTextField();
        getLocationsButton = new JButton();
        locationSelector = new JComboBox<>();
        jPanel1 = new JPanel();
        weatherOutput = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("BBC Weather Observations");

        appTitle.setFont(new Font("Lucida Grande", 0, 18)); // NOI18N
        appTitle.setText("BBC Weather Observations");

        queryLabel.setText("City");

        queryField.setText("Enter a location...");
        queryField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                queryFieldActionPerformed(evt);
            }
        });

        getLocationsButton.setText("Get Location(s)");
        getLocationsButton.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                getLocationsButtonMouseClicked(evt);
            }
        });
        getLocationsButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                getLocationsButtonActionPerformed(evt);
            }
        });

        locationSelector.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                locationSelectorActionPerformed(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(weatherOutput, GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(weatherOutput)
                .addContainerGap(202, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(appTitle)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(queryLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(queryField, GroupLayout.PREFERRED_SIZE, 154, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(getLocationsButton, GroupLayout.PREFERRED_SIZE, 121, Short.MAX_VALUE))
                            .addComponent(locationSelector, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(appTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(queryLabel)
                    .addComponent(queryField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(getLocationsButton))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(locationSelector, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void queryFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_queryFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_queryFieldActionPerformed

    private void getLocationsButtonMouseClicked(MouseEvent evt) {//GEN-FIRST:event_getLocationsButtonMouseClicked
        // Clear ComboBox
        locationSelector.removeAllItems();

        // Get the city name
        String city = queryField.getText();
        
        // Get locations
        LocationParser parser = new LocationParser(city);
        locations = parser.getOutput();
        
        // Populate ComboList
        for (Location l : locations) {
            locationSelector.addItem(l.getName() + ", " + l.getCountry());
        }
    }//GEN-LAST:event_getLocationsButtonMouseClicked

    private void getLocationsButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_getLocationsButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getLocationsButtonActionPerformed

    private void locationSelectorActionPerformed(ActionEvent evt) {//GEN-FIRST:event_locationSelectorActionPerformed
        
        // TODO add your handling code here:
        // i am here
        Location l = locations.get(locationSelector.getSelectedIndex());
        int geonameId = l.getGeonameId();
        updateWeatherInfoPanel(geonameId);
        
    }//GEN-LAST:event_locationSelectorActionPerformed
    
    /**
     * Updates the GUI with selected weather info
     * @param geonameId 
     */
    private void updateWeatherInfoPanel(int geonameId) {
        WeatherParser parser = new WeatherParser(geonameId);
        System.out.println(parser.getOutput());
        weatherOutput.setText(parser.getOutput());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new WeatherFrame().setVisible(true);
            }
        });
    }

    /**
     * Method assigns icon to reflect the current weather.
     */
    private void setWeatherIcon(String comparator){
        String fileLocation = WeatherAppUtils.weatherToIcon(comparator);
        //appWeatherIcon.setIcon(new ImageIcon(getClass().getResource(fileLocation)));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel appTitle;
    private JButton getLocationsButton;
    private JPanel jPanel1;
    private JComboBox<String> locationSelector;
    private JTextField queryField;
    private JLabel queryLabel;
    private JLabel weatherOutput;
    // End of variables declaration//GEN-END:variables
}
